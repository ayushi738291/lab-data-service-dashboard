#+TITLE: The REST API for Lab Data Service Dashboard
#+AUTHOR: VLEAD
#+DATE: [2017-06-05 Mon]
#+SETUPFILE: ../../../org-templates/level-3.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API.

* REST
** Serve index.html
#+NAME: serve_index_html
#+BEGIN_SRC python 

@api.route("/", methods=['GET'])
def index():
    return render_template("index.html")
#+END_SRC

** Login API
   API to login to the application.
*** API Design
  - URL :: /login
  - Method :: GET
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/login
    #+END_EXAMPLE
  - Error Response ::
    + Code: 400 - Google OAuth error
    + Code: 401 - HTTP error
*** =Login= API
    When user clicks on =login= button from f/e it will invoke =/login= api and
    thereby it will forward request to =google=. User must sign in using it's 
    google credentials which is then stored in our database.
#+NAME: oauth_session_creation
#+BEGIN_SRC python 

def get_google_auth(state=None, token=None):
    if token:
        return OAuth2Session(Auth.CLIENT_ID, token=token)
    if state:
        return OAuth2Session(
            Auth.CLIENT_ID,
            state=state,
            redirect_uri=Auth.REDIRECT_URI)
    oauth = OAuth2Session(
        Auth.CLIENT_ID,
        redirect_uri=Auth.REDIRECT_URI,
        scope=Auth.SCOPE)
    return oauth
#+END_SRC

#+NAME: check_email
#+BEGIN_SRC python
@mod_users.route('/check_valid', methods=['POST'])
def check_valid():
	try:
		email = request.args['email']
	except:
		try:
			email = request.form['email']
		except KeyError as e:
			return jsonify(success=False, message="%s not sent in the request" % e.args), 400
    
	user_tocheck = User.query.filter(User.email==email).first()
	if user_tocheck is None:
		return jsonify(success=False, message="This User is not availed to LDS")
	
	return jsonify(success=True, message="This User is availed to LDS")
#+END_SRC

#+NAME: login_route
#+BEGIN_SRC python
@api.route('/login', methods=["GET"])
def login():
    if current_user.is_authenticated:
        return render_template('index.html')
    google = get_google_auth()
    auth_url, state = google.authorization_url(
        Auth.AUTH_URI, access_type='offline')
    session['oauth_state'] = state
    return render_template('login.html', auth_url=auth_url)
 #+END_SRC

*** Google Callback response =API=
    - Once the Google verfies the user credentials it will send callback
      response to =/authorized= api which should be registered at google's
      dashboard as one of Authorized redirect URIs

    - Once google authenticates the user, =userdirectory= application will
      authorize the user to use the application.

#+NAME: callback_google_api
#+BEGIN_SRC python

@api.route('/gCallback')
def callback():
    if current_user is not None and current_user.is_authenticated:
        return redirect("/")
    if 'error' in request.args:
        if request.args.get('error') == 'access_denied':
            return 'You have been denied access.'
        return 'Error encountered.'
    if 'code' not in request.args and 'state' not in request.args:
        return redirect("login")
    else:
        google = get_google_auth(state=session.get('oauth_state'))
        try:
            token = google.fetch_token(
                Auth.TOKEN_URI,
                client_secret=Auth.CLIENT_SECRET,
                authorization_response=request.url)
        except:
            return jsonify(success=False, message="HTTP connectivity error"), 401

        google = get_google_auth(token=token)
        resp = google.get(Auth.USER_INFO)
        data = resp.json()
        if resp.status_code == 200:
            email = data['email']
            user = User.query.filter_by(email=email).first()

            if user is None:
                return render_template("auth_req.html")

            login_user(user)
 
            if (user.role == "admin"):
                session['type'] = 'admin'
            elif (user.role == "guest"):
                session['type'] = 'guest'
            else:
                return render_template("auth_req.html")
            return redirect('/')    
        
        return  jsonify(success=False, message="Couldn't fetch information"), 400
#+END_SRC

*** Google OAuth Credentials
    Google OAuth service required URLs (Credentials) should be specified

#+NAME: google_oauth_configuration
#+BEGIN_SRC python

class goauth:
    CLIENT_ID = "Your client ID"
    CLIENT_SECRET = "Your client secret"
    REDIRECT_URI = 'https://localhost:5000/gCallback'
    AUTH_URI = 'https://accounts.google.com/o/oauth2/auth'
    TOKEN_URI = 'https://accounts.google.com/o/oauth2/token'
    USER_INFO = 'https://www.googleapis.com/userinfo/v2/me'
    SCOPE = ['https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email'

#+END_SRC

** Logout API
   When user clicks on =logout= button from f/e it will invoke =/logout= api
   and thereby it will destroy all session variables.

*** API Design

  - URL :: /logout
  - Method :: GET
  - URL Params ::  None
  - Success Response ::
    + Code: 200
  - Error Response ::
    + Code: 400 - No user in session
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/logout
    #+END_EXAMPLE

*** Implementation

#+NAME: logout_route
#+BEGIN_SRC python

@api.route('/logout', methods=["GET"])
@login_required
def logout():
    if session.get('_id') is not None:
        try:
            logout_user()
            session.clear()
            return redirect("/")
        except:
            return jsonify(success=False, message="No session present"), 400

    else:
        return redirect("/")

#+END_SRC
** Add User
   API to add a User
*** API Design
  - URL :: /add_user
  - Method :: POST
  - Success Response ::
    + Code: 200
  - Error Response ::
    + Code: 400
  - URL params ::
    {
      "name":"test",
      "email":"test@gmail.com"
      "role" : "admin"
    }
  - Example ::
    #+BEGIN_EXAMPLE
     http://localhost:5000/add_user?name=test&email=test@g.com&role=admin
    #+END_EXAMPLE

*** Implementation
Only Admin has the right to add a user and assign role to him. To add a user =Name= , =Email= and =Role= fields are required.
Implementation of the =Add User API= is given below.

#+NAME: add_user
#+BEGIN_SRC python 
@mod_users.route('/add_user', methods=['POST'])
@login_required
@requires_admin_auth
def create_user():

    try:
        temp = json.loads(request.data)
        email = temp['email']
        name = temp['name']
        role = temp['role']
    except:
        try:
            email = request.args.get('email')
            name = request.args.get('name')
            role = request.args.get('role')
        except KeyError as e:
            return jsonify(success=False, message="%s not sent in the request" % e.args), 400

    if not (name or email or role):
        return jsonify(success=False, message="Arguments not provided"), 400

    try:
        match = re.match(r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)", email)
        if match is None:
            return jsonify(success=False, message="Please enter a valid email"), 400         
    except:
        return jsonify(success=False, message="Arguments went missing"), 400

    check_role = Roles.query.filter(Roles.role_name==role).first()
    if check_role is None:
        return jsonify(success=False, message="Role doesn't exist"), 400

    u = User()
    u.name = name
    u.email = email
    u.role = role
    db.session.add(u)
    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="This email already exists"), 500

    return jsonify(success=True)


#+END_SRC

*** Test Cases
**** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python :tangle app/tests/test_add_user.py
# -*- coding: utf-8 -*-
import unittest
import os
import sys
from flask import Flask, Blueprint, json, render_template, request, session, jsonify      
from flask_testing import TestCase
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import IntegrityError
import datetime
import client
from functools import wraps
from flask_login import LoginManager
#from imp import runtime
#from imp.runtime.rest import api
from imp.runtime.rest.api import api as api
from imp.runtime.rest import db
from imp.runtime.rest.db import User, Roles
from imp.runtime.rest import app, db, login_manager, requires_guest_auth, requires_admin_auth


#from config import basedir
#from app.users.controllers import mod_users
#from app.users.models import User, Roles
#from app import app, db, login_manager,requires_guest_auth,requires_admin_auth
basedir = os.path.abspath(os.path.dirname(__file__))

config = {
        'SQLALCHEMY_DATABASE_URI': 'sqlite:///' + os.path.join(basedir, "app.db"),
        'DATABASE_CONNECT_OPTIONS': {},
        'SQLALCHEMY_TRACK_MODIFICATIONS': False,         
   	}
#+end_src
**** Test Add User

#+NAME: test_add_user
#+BEGIN_SRC python :tangle app/tests/test_add_user.py
class TestAddUser(TestCase):
    TESTING = True
    def create_app(self):
        app = Flask(__name__)
        app.register_blueprint(mod_users, url_prefix=None)
        app.config.from_object("config")
        app.config['TESTING'] = True
        login_manager = LoginManager(app)
        login_manager.login_view = "users.login"
        self.app = app.test_client()
        db.init_app(app)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_user_1(self):
		print "test_add_user_1"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), 
                                        headers=headers)
		payload = {
                    'name': 'Test1',
		            'email': 'test1@gmail.com',
		            'role': 'admin'
		          }
		headers = {'Content-Type': 'application/json'}

		response = self.client.post("/add_user", data=json.dumps(payload), 
                                        headers=headers)

		self.assertEqual(response.status_code, 200)

    def test_add_user_2(self):
        print "test_add_user_2"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload),
                                        headers=headers)
    
        payload = {
                    'name': 'Test2',
                    'email': 'te@st2@gmailcom',
                    'role': 'admin'
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/add_user", data=json.dumps(payload),
                                        headers=headers)

        self.assertEqual(response.status_code, 400)

    def test_add_user_3(self):
        print "test_add_user_3"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload),
                                        headers=headers)
    
        payload = {
                    'email': 'test3@gmail.com',
                    'role': 'admin'
                  }
        headers = {'Content-Type': 'application/json'}
        #data=json.dumps(payload)
        #temp = json.loads(data)
        #email = temp['email']
        #print email

        response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

        self.assertEqual(response.status_code, 400)

    def test_add_user_4(self):
        print "test_add_user_4"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
    
        payload = {
                    'name': 'Test4',
                    'email': 'test4@gmail.com',
                    'role': 'developer'
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

        self.assertEqual(response.status_code, 400)

    def test_add_user_5(self):
        print "test_add_user_5"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
    
        payload = {
                    'name': 'Test5',
                    'role': 'admin'
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

        self.assertEqual(response.status_code, 400)

    def test_add_user_6(self):
        print "test_add_user_6"
        payload = {'name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
    
        payload = {
                    'name': 'Test6',
                    'email': 'test6@gmail.com',
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

        self.assertEqual(response.status_code, 400)

    def test_add_user_7(self):
        print "test_add_user_7"
        payload = {'name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
    
        payload = {
                    'name': 'Test7',
                    'email': 'test7@gmail.com',
                    'role': ''
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

        self.assertEqual(response.status_code, 400)
#+END_SRC
**** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python :tangle app/tests/test_add_user.py
if __name__ == '__main__':
    unittest.main()

#+END_SRC
** Add Role
API to add a role
*** API Design
 - URL :: /add_role
  - Method :: POST
  - Success Response ::
    + Code: 200
  - Error Response ::
    + Code: 400
  - URL Params ::
    {
      "role_name":"admin"
    }
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/add_role?role_name=admin
    #+END_EXAMPLE
*** Implementation
Admin has the right to add a role thus restricting the access to the LDS servive.To add a role =role_name= field should be given.
Implementation of the =Add Role= API is given below.
#+NAME: add_role
#+BEGIN_SRC python 
@mod_users.route('/add_role', methods=['POST'])
@login_required
@requires_admin_auth
def create_role():
    try:
        temp = json.loads(request.data)
        name = temp['role_name']
    except:
        try:
            name = request.args['role_name']
        except KeyError as e:
            return jsonify(success=False, message="%s not sent in the request" % e.args), 400

    if not name:
        return jsonify(success=False, message="No role provided"), 400

    u = Roles(name)
    db.session.add(u)
    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="This role already exists"), 500
	
    return jsonify(success=True)


#+END_SRC
*** Test Cases
**** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python :tangle app/tests/test_add_role.py
# -*- coding: utf-8 -*-
import unittest
import os
import sys
from flask import Flask, Blueprint, json, render_template, request, session, jsonify      
from flask_testing import TestCase
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import IntegrityError
import datetime
import client
from functools import wraps
from flask_login import LoginManager
#from imp import runtime
#from imp.runtime.rest import api
from imp.runtime.rest.api import api as api
from imp.runtime.rest import db
from imp.runtime.rest.db import User, Roles
from imp.runtime.rest import app, db, login_manager, requires_guest_auth, requires_admin_auth


#from config import basedir
#from app.users.controllers import mod_users
#from app.users.models import User, Roles
#from app import app, db, login_manager,requires_guest_auth,requires_admin_auth
basedir = os.path.abspath(os.path.dirname(__file__))

config = {
        'SQLALCHEMY_DATABASE_URI': 'sqlite:///' + os.path.join(basedir, "app.db"),
        'DATABASE_CONNECT_OPTIONS': {},
        'SQLALCHEMY_TRACK_MODIFICATIONS': False,         
   	}
#+end_src
**** Test Add Role
#+NAME: test_add_role
#+BEGIN_SRC python :tangle app/tests/test_add_role.py
class TestAddRole(TestCase):
    TESTING = True
    def create_app(self):
        app = Flask(__name__)
        app.register_blueprint(mod_users, url_prefix=None)
        app.config.from_object("config")
        app.config['TESTING'] = True
        login_manager = LoginManager(app)
        login_manager.login_view = "users.login"
        self.app = app.test_client()
        db.init_app(app)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_role_1(self):
        print "test_add_role_1"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
        self.assertEqual(response.status_code, 200)

    def test_add_role_2(self):
        print "test_add_role_2"
        payload = {'role_name': ''}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
        self.assertEqual(response.status_code, 400)    

    def test_add_role_3(self):
        print "test_add_role_3"
        payload = {'role_name': None}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
        self.assertEqual(response.status_code, 400)
#+END_SRC
**** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python :tangle app/tests/test_add_role.py
if __name__ == '__main__':
    unittest.main()

#+END_SRC
** Show users
API for show users
*** API Design
 - URL :: /users
  - Method :: GET
  - URL Params ::  None
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/users
    #+END_EXAMPLE

*** Implementation
This API shows the list of all users who are registered for the LDS.
The implementation is given below.

#+NAME: show_users
#+BEGIN_SRC python 

@mod_users.route('/users', methods=['GET'])
@login_required
def show_users():
	users = User.query.all()
	allusers = []
	for i in users:
		temp = i.to_dict()
		allusers.append(temp)
	return jsonify(success=True,users=allusers)
#+END_SRC
*** Test Cases
**** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python :tangle app/tests/test_show_users.py
# -*- coding: utf-8 -*-
import unittest
import os
import sys
from flask import Flask, Blueprint, json, render_template, request, session, jsonify      
from flask_testing import TestCase
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import IntegrityError
import datetime
import client
from functools import wraps
from flask_login import LoginManager
#from imp import runtime
#from imp.runtime.rest import api
from imp.runtime.rest.api import api as api
from imp.runtime.rest import db
from imp.runtime.rest.db import User, Roles
from imp.runtime.rest import app, db, login_manager, requires_guest_auth, requires_admin_auth


#from config import basedir
#from app.users.controllers import mod_users
#from app.users.models import User, Roles
#from app import app, db, login_manager,requires_guest_auth,requires_admin_auth
basedir = os.path.abspath(os.path.dirname(__file__))

config = {
        'SQLALCHEMY_DATABASE_URI': 'sqlite:///' + os.path.join(basedir, "app.db"),
        'DATABASE_CONNECT_OPTIONS': {},
        'SQLALCHEMY_TRACK_MODIFICATIONS': False,         
   	}
#+end_src
**** Test Show users
#+NAME: test_show_users
#+BEGIN_SRC python :tangle app/tests/test_show_users.py
class TestShowUsers(TestCase):
	TESTING = True
	def create_app(self):
		app = Flask(__name__)
		app.register_blueprint(mod_users, url_prefix=None)
		app.config.from_object("config")
		app.config['TESTING'] = True
		login_manager = LoginManager(app)
		login_manager.login_view = "users.login"
		self.app = app.test_client()
		db.init_app(app)
		return app

	def setUp(self):
		db.create_all()

	def tearDown(self):
		db.session.remove()
		db.drop_all()
		
	def test_show_user_1(self):
		print "test_show_user_1"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
		
		payload = {'name': 'Test1',
			       'email': 'test1@gmail.com',
		           'role' : 'admin'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

		response = self.client.get("/users", headers=headers)
		
		self.assertEqual(response.status_code, 200)

	def test_show_user_2(self):
		print "test_show_user_2"
		payload = {'name': 'admin'}
		headers = {'Content-Type': 'application/json'}
        
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
    
		payload = {
                    'name': 'Test2',
                    'email': 'test2@gmail.com',
                    'role': ''
                  }
		headers = {'Content-Type': 'application/json'}

		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

		response = self.client.get("/users", headers=headers)
		self.assertEqual(response.status_code, 200)

	def test_show_user_3(self):
		print "test_show_user_3"
		response = self.client.get("/users")
		self.assertEqual(response.status_code, 200)
#+END_SRC
**** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python :tangle app/tests/test_show_users.py
if __name__ == '__main__':
    unittest.main()

#+END_SRC
** Show roles
*** API Design
 - URL :: /roles
  - Method :: GET
  - URL Params ::  None
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/roles
    #+END_EXAMPLE

*** Implementation
This API returns the list of all the roles in the LDS.
Implementation of =show role= API is given below
#+NAME: show_roles
#+BEGIN_SRC python
@mod_users.route('/roles', methods=['GET'])
@login_required	
def show_roles():
    roles = Roles.query.all()
    allroles = []
    for i in roles:
        temp = i.to_dict()
        allroles.append(temp)
    return jsonify(success=True,roles=allroles)

#+END_SRC

*** Test Cases
**** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python :tangle app/tests/test_show_roles.py
# -*- coding: utf-8 -*-
import unittest
import os
import sys
from flask import Flask, Blueprint, json, render_template, request, session, jsonify      
from flask_testing import TestCase
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import IntegrityError
import datetime
import client
from functools import wraps
from flask_login import LoginManager
#from imp import runtime
#from imp.runtime.rest import api
from imp.runtime.rest.api import api as api
from imp.runtime.rest import db
from imp.runtime.rest.db import User, Roles
from imp.runtime.rest import app, db, login_manager, requires_guest_auth, requires_admin_auth


#from config import basedir
#from app.users.controllers import mod_users
#from app.users.models import User, Roles
#from app import app, db, login_manager,requires_guest_auth,requires_admin_auth
basedir = os.path.abspath(os.path.dirname(__file__))

config = {
        'SQLALCHEMY_DATABASE_URI': 'sqlite:///' + os.path.join(basedir, "app.db"),
        'DATABASE_CONNECT_OPTIONS': {},
        'SQLALCHEMY_TRACK_MODIFICATIONS': False,         
   	}
#+end_src
**** Test Show Roles
#+NAME: test_show_roles
#+BEGIN_SRC python :tangle app/tests/test_show_roles.py
class TestShowRole(TestCase):
	TESTING = True
	def create_app(self):
		app = Flask(__name__)
		app.register_blueprint(mod_users, url_prefix=None)
		app.config.from_object("config")
		app.config['TESTING'] = True
		login_manager = LoginManager(app)
		login_manager.login_view = "users.login"
		self.app = app.test_client()
		db.init_app(app)
		return app

	def setUp(self):
		db.create_all()

	def tearDown(self):
		db.session.remove()
		db.drop_all()

	def test_show_roles_1(self):
		print "test_show_roles_1"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
		
		response = self.client.get("/roles", headers=headers)
		
		self.assertEqual(response.status_code, 200)

	def test_show_roles_2(self):
		print "test_show_roles_2"
		payload = {'role_name': ''}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
		
		response = self.client.get("/roles", headers=headers)
		
		self.assertEqual(response.status_code, 200)	

	def test_show_roles_3(self):
		print "test_show_roles_3"
		
		response = self.client.get("/roles")
		
		self.assertEqual(response.status_code, 200)
#+END_SRC
**** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python :tangle app/tests/test_show_roles.py
if __name__ == '__main__':
    unittest.main()

#+END_SRC
** Delete User
   API for Delete User
*** API Design
  - URL :: /delete_user
  - Method :: DELETE
  - URL Params ::  
    {
       "email" : "test@gmail.com"
    }
  - Success Response ::
    + Code: 200
  - Error Response ::
    + Code: 400
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/delete_user?email=test@gmail.com
    #+END_EXAMPLE
*** Implementation
    Admin also has the right to delete a user. To delete a user =email= should be given as the field to delete a particular user.

#+NAME: delete_user
#+BEGIN_SRC python 
@mod_users.route('/delete_user', methods=['POST'])
@login_required
@requires_admin_auth
def delete_user():
    try:
        email = request.args['user_email']
    except KeyError as e:
        return jsonify(success=False, message="%s not sent in the request" % e.args), 400
    
    
    user = User.query.filter(User.email==email)
    user_todel = user.first() 
    
    if user_todel is None:
        return jsonify(success=False, message="This email does not exists"), 400
    elif (user_todel == current_user):
    	return jsonify(success=False, message="This is not an valid operation"), 400
    elif (user_todel.role == 'admin' and len(user) == 1):
    	return jsonify(success=False, message="At least one admin must be present"), 400

    db.session.delete(user_todel) 
    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="could'nt delete the user"), 500
    return jsonify(success=True)


#+END_SRC
*** Test Cases
**** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python :tangle app/tests/test_delete_user.py
# -*- coding: utf-8 -*-
import unittest
import os
import sys
from flask import Flask, Blueprint, json, render_template, request, session, jsonify      
from flask_testing import TestCase
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import IntegrityError
import datetime
import client
from functools import wraps
from flask_login import LoginManager
#from imp import runtime
#from imp.runtime.rest import api
from imp.runtime.rest.api import api as api
from imp.runtime.rest import db
from imp.runtime.rest.db import User, Roles
from imp.runtime.rest import app, db, login_manager, requires_guest_auth, requires_admin_auth


#from config import basedir
#from app.users.controllers import mod_users
#from app.users.models import User, Roles
#from app import app, db, login_manager,requires_guest_auth,requires_admin_auth
basedir = os.path.abspath(os.path.dirname(__file__))

config = {
        'SQLALCHEMY_DATABASE_URI': 'sqlite:///' + os.path.join(basedir, "app.db"),
        'DATABASE_CONNECT_OPTIONS': {},
        'SQLALCHEMY_TRACK_MODIFICATIONS': False,         
   	}
#+end_src
**** Test Delete user
#+NAME: test_delete_user
#+BEGIN_SRC python :tangle app/tests/test_delete_user.py
class TestDeleteUser(TestCase):
    TESTING = True
    def create_app(self):
        app = Flask(__name__)
        app.register_blueprint(mod_users, url_prefix=None)
        app.config.from_object("config")
        app.config['TESTING'] = True
        login_manager = LoginManager(app)
        login_manager.login_view = "users.login"
        self.app = app.test_client()
        db.init_app(app)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_role_1(self):
		print "test_delete_role_1"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
        
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
		payload = {'name': 'Test1',
			       'email': 'test1@gmail.com',
		           'role' : 'admin'
		           }
		
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

		response = self.client.post("/delete_user?user_email=test1@gmail.com", headers=headers)
		
		self.assertEqual(response.status_code, 200)

    def test_delete_role_2(self):
		print "test_delete_role_2"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
        
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
		payload = {'name': 'Test2',
			       'email': 'test2@gmail.com',
		           'role' : 'admin'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

		response = self.client.post("/delete_user?user_email=", headers=headers)
		
		self.assertEqual(response.status_code, 400)	

    def test_delete_role_3(self):
		print "test_delete_role_3"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
		payload = {'name': 'Test3',
			       'email': 'test3@gmail.com',
		           'role' : 'admin'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

		response = self.client.post("/delete_user?user_email=test@gmail.com", headers=headers)
		
		self.assertEqual(response.status_code, 400)	

#+END_SRC
**** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python :tangle app/tests/test_delete_user.py
if __name__ == '__main__':
    unittest.main()

#+END_SRC
** Delete Role
   API to Delete a Role
*** API Design
 - URL :: /delete_role
  - Method :: POST
  - URL Params ::  
    {
       "role_name" : "admin"
    }
  - Success Response ::
    + Code: 200
  - Error Response ::
    + Code: 400
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/delete_role?role_name=admin
    #+END_EXAMPLE
*** Implementation
    Admin has the right to delete a role. To delete a role, =role_name= 
    should be sent as an argument.
    Implementation of =delete role= is given below.
#+NAME: delete_role
#+BEGIN_SRC python

@mod_users.route('/delete_role', methods=['POST'])
@login_required
@requires_admin_auth	
def delete_role():
    try:
        role_name = request.args['role_name']
    except KeyError as e:
        return jsonify(success=False, message="%s not sent in the request" % e.args), 400

    if not role_name:
        return jsonify(success=False, message="No role provided"), 400

    role_todel = Roles.query.filter(Roles.role_name==role_name).first()
    
    if role_todel is None:
        return jsonify(success=False, message="This role does not exists"), 400
    elif (role_todel == 'admin'):
    	return jsonify(success=False, message="You cannot delete this role"), 400
    
    db.session.delete(role_todel)
    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="could not delete"), 500
    return jsonify(success=True)

#+END_SRC

*** Test Cases
**** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python :tangle app/tests/test_delete_role.py
# -*- coding: utf-8 -*-
import unittest
import os
import sys
from flask import Flask, Blueprint, json, render_template, request, session, jsonify      
from flask_testing import TestCase
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import IntegrityError
import datetime
import client
from functools import wraps
from flask_login import LoginManager
#from imp import runtime
#from imp.runtime.rest import api
from imp.runtime.rest.api import api as api
from imp.runtime.rest import db
from imp.runtime.rest.db import User, Roles
from imp.runtime.rest import app, db, login_manager, requires_guest_auth, requires_admin_auth


#from config import basedir
#from app.users.controllers import mod_users
#from app.users.models import User, Roles
#from app import app, db, login_manager,requires_guest_auth,requires_admin_auth
basedir = os.path.abspath(os.path.dirname(__file__))

config = {
        'SQLALCHEMY_DATABASE_URI': 'sqlite:///' + os.path.join(basedir, "app.db"),
        'DATABASE_CONNECT_OPTIONS': {},
        'SQLALCHEMY_TRACK_MODIFICATIONS': False,         
   	}
#+end_src
**** Test Delete role
#+NAME: test_delete_role
#+BEGIN_SRC python :tangle app/tests/test_delete_role.py
class TestDeleteRole(TestCase):
    TESTING = True
    def create_app(self):
        app = Flask(__name__)
        app.register_blueprint(mod_users, url_prefix=None)
        app.config.from_object("config")
        app.config['TESTING'] = True
        login_manager = LoginManager(app)
        login_manager.login_view = "users.login"
        self.app = app.test_client()
        db.init_app(app)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_user_1(self):
        print "test_delete_role_1"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
        response = self.client.post("/delete_role?role_name=admin", headers=headers)

        self.assertEqual(response.status_code, 200)

    def test_delete_user_2(self):
		print "test_delete_role_2"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
		
		response = self.client.post("/delete_role?role_name=", headers=headers)

		self.assertEqual(response.status_code, 400)

    def test_delete_user_3(self):
        print "test_delete_role_3"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
        response = self.client.post("/delete_role?role_name=guest", headers=headers)

        self.assertEqual(response.status_code, 400)

#+END_SRC
**** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python :tangle app/tests/test_delete_role.py
if __name__ == '__main__':
    unittest.main()

#+END_SRC
** Update User
   API to Update a User
*** API Design
 - URL :: /update_user
  - Method :: PUT
  - URL Params ::  
    {
       "email" : "test@gmail.com"
       "new_email" : "test1@gmail.com"
       "new_role" : "admin"
       "new_name" : "test1"
    }
  - Success Response ::
    + Code: 200
  - Error Response ::
    + Code: 400
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/update_user?email=test@gmail.com&new_email=test1&gmail.com&new_name=test2&new_role=admin
    #+END_EXAMPLE
*** Implementation
    Admin has the right to edit the details of a student who is registered 
    for the Lab Data Service. He can edit any of the details =name=,=email=
    or =role=.
    The implementation is given below.
#+NAME: update_user
#+BEGIN_SRC python

@mod_users.route('/update_user', methods=['PUT'])
@login_required
@requires_admin_auth
def update_user():

    try:
        temp = json.loads(request.data)
        email = temp['email']
        new_name = temp['new_name']
        new_email = temp['new_email']
        new_role = temp['new_role']
    except:
        try:
            email = request.args.get['email']
            new_name = request.args.get['new_name']
            new_email = request.args.get['new_email']
            new_role = request.args.get['new_role']
        except KeyError as e:
            return jsonify(success=False, message="%s not sent in the request" % e.args), 400

    if not (new_name or new_role or new_email):
        return jsonify(success=False, message="Invalid arguments were provided"), 400

    user_toupdate = User.query.filter(User.email==email).first()
    if user_toupdate is None:
        return jsonify(success=False, message="This email doesn't exists"), 400

    check_role = Roles.query.filter(Roles.role_name==new_role).first()
    if check_role is None:
        return jsonify(success=False, message="Role doesn't exist"), 400
    elif (check_role.role == 'admin' and check_role != current_user ):
        return jsonify(success=False, message="You cannot edit another admin"), 400    


    user_toupdate.name = new_name
    user_toupdate.email = new_email
    user_toupdate.role = new_role

    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="Could not update the user"), 500

    return jsonify(success=True)
#+END_SRC

								:boilerplate:

*** Test Cases
**** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python :tangle app/tests/test_update_user.py
# -*- coding: utf-8 -*-
import unittest
import os
import sys
from flask import Flask, Blueprint, json, render_template, request, session, jsonify      
from flask_testing import TestCase
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import IntegrityError
import datetime
import client
from functools import wraps
from flask_login import LoginManager
#from imp import runtime
#from imp.runtime.rest import api
from imp.runtime.rest.api import api as api
from imp.runtime.rest import db
from imp.runtime.rest.db import User, Roles
from imp.runtime.rest import app, db, login_manager, requires_guest_auth, requires_admin_auth


#from config import basedir
#from app.users.controllers import mod_users
#from app.users.models import User, Roles
#from app import app, db, login_manager,requires_guest_auth,requires_admin_auth
basedir = os.path.abspath(os.path.dirname(__file__))

config = {
        'SQLALCHEMY_DATABASE_URI': 'sqlite:///' + os.path.join(basedir, "app.db"),
        'DATABASE_CONNECT_OPTIONS': {},
        'SQLALCHEMY_TRACK_MODIFICATIONS': False,         
   	}
#+end_src
**** Test Update user
#+NAME: test_update_user
#+BEGIN_SRC python :tangle app/tests/test_update_user.py
class TestUpdateUsers(TestCase):
	TESTING = True
	def create_app(self):
		app = Flask(__name__)
		app.register_blueprint(mod_users, url_prefix=None)
		app.config.from_object("config")
		app.config['TESTING'] = True
		login_manager = LoginManager(app)
		login_manager.login_view = "users.login"
		self.app = app.test_client()
		db.init_app(app)
		return app

	def setUp(self):
		db.create_all()

	def tearDown(self):
		db.session.remove()
		db.drop_all()

	def test_update_user_1(self):
		print "test_update_user_1"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)

		payload = {'role_name': 'user'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)

		payload = {'name': 'Test1',
			       'email': 'test1@gmail.com',
		           'role' : 'admin'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)
		
		payload1 = {'new_name': 'Test_1',
			       'email': 'test1@gmail.com',
				   'new_email': 'test1@gmail.com',
		           'new_role' : 'user'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.put("/update_user", data=json.dumps(payload1), headers=headers)

		self.assertEqual(response.status_code, 200)

	def test_update_user_2(self):
		print "test_update_user_2"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)

		payload = {'role_name': 'user'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)

		payload = {'name': 'Test2',
			       'email': 'test2@gmail.com',
		           'role' : 'admin'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)
		
		payload1 = {'new_name': '',
			       'email': 'test1@gmail.com',
				   'new_email': 'test1@gmail.com',
		           'new_role' : 'user'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.put("/update_user", data=json.dumps(payload1), headers=headers)

		self.assertEqual(response.status_code, 400)

	def test_update_user_3(self):
		print "test_update_user_3"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)

		payload = {'role_name': 'user'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)

		payload = {'name': 'Test3',
			       'email': 'test3@gmail.com',
		           'role' : 'admin'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)
		
		payload1 = {'new_name': 'Test_3',
			       'email': 'test@gmail.com',
				   'new_email': 'test1@gmail.com',
		           'new_role' : 'user'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.put("/update_user", data=json.dumps(payload1), headers=headers)

		self.assertEqual(response.status_code, 400)
#+END_SRC
**** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python :tangle app/tests/test_update_user.py
if __name__ == '__main__':
    unittest.main()

#+END_SRC
* HTML
** Login
This is the HTML code for Login page
#+NAME: login_page
#+BEGIN_SRC html :tangle app/templates/login.html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LOGIN</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:400,300,500,600,700|Nosifer">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <link href="../static/css/style.css" rel="stylesheet">
    <script src="static/js/login.js"></script>
</head>
<body>
    <header id="top" class="header">
        <div class="text-vertical-center">
            <h1>WELCOME</h1>
            <h3>TO</h3>
            <h2>LAB DATA SERVICE</h2>
            <br>
            <a href="{{auth_url}}" class="btn btn-dark btn-lg">LOGIN</a>
        </div>
    </header>
</button>

</body>
</html>
#+END_SRC

** Guest Home
#+NAME: guest_home
#+BEGIN_SRC html :tangle app/templates/guest_home.html
<!DOCTYPE html>
<html>
<head>
    <title>HOME</title>
    <meta charset="utf-8">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="static/js/guest.js"></script>
    <link href="../static/css/style.css" rel="stylesheet">


</head>
<body>
    <div class="wrapper">
    <header class="main-header">    
      <nav class="navbar navbar navbar-static-top  navbar-inverse">
      <!-- Sidebar toggle button-->
        <a href="{{ data['email'] }}" class="sidebar-toggle" data-toggle="push-menu" role="button">
          <span class="sr-only">Toggle navigation</span>
        </a>

        <div class="navbar-custom-menu">
          <ul class="nav navbar-nav navbar-right">
            <!-- Messages: style can be found in dropdown.less-->     
            <!-- User Account: style can be found in dropdown.less -->
            <li class="dropdown user dropdown-menu-right user-menu">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                <span class="col-sm-4">{{data['name']}}</span>
              </a>
              <ul class="dropdown-menu">
                <!-- User image -->
                <li class="user-header">
                  <p> 
                    {{data['email']}}
                  </p>
                </li>
                <!-- Menu Footer-->
                <li class="user-footer">
                  <div class="pull-left">
                    <a href="/" class="btn btn-default btn-flat">Home</a>
                  </div>
                  <div class="pull-right">
                    <a href="/logout" class="btn btn-default btn-flat">Sign out</a>
                  </div>
                </li>
              </ul>
            </li>
          </ul>
        
        </div>
      
      </nav>
    </header>  
<!--
      <ul class="sidebar-menu" data-widget="tree">
        <li class="side-header">MAIN NAVIGATION</li>
        
          <ul class="">
               <li> <a  href="/inactive-list">GET LABS</a>                            </li>       
               <li> <a  href='/active-list'>GET LAB</a>                               </li>         
               <li> <a  href='/view-student'> GET LAB By Institute</a>                </li>          
               <li> <a  href='/view-registration'>GET LAB By Lab Name</a>             </li>        
               <li> <a  href='/monthly-registration'> GET LAB By Discipline</a>       </li>          
               <li> <a  href='/reset-password'> GET LAB By Asset</a>                  </li>         
               <li> <a  href='/add-student-admin'> GET LAB By passing keyword</a>     </li>          
               <li> <a  href='/update-mess'>GET INSTITUTES</a>                        </li>        
               <li> <a  href='/change-registration'>GET INSTITUTE By Institute ID</a> </li>             
               <li> <a  href='/cancel-mess'> GET DISCIPLINES</a>                      </li>             
               <li> <a  href='/complaints'> GET DISCIPLINE BY Discipline ID</a>       </li>              
               <li> <a  href='/cancel-mess'> GET EXPERIMENTS</a>                      </li>              
               <li> <a  href='/cancel-mess'> GET EXPERIMENTS By Experiment ID</a>     </li>                      
               <li> <a  href='/cancel-mess'> GET SECTIONS</a>                         </li>              
               <li> <a  href='/cancel-mess'> GET HOSTING INFO</a>                     </li>                  
               <li> <a  href='/cancel-mess'> GET Integration Status</a>               </li>                
          </ul>
        </li>
      
      </ul>
    </section>
  </aside>
//-->
<div class="col-lg-3 col-md-3 col-sm-4">
  <div class="list-group table-of-contents">
    <a class="list-group-item" href="/inactive-list">GET LABS</a>
    <a class="list-group-item" href='/active-list'>GET LAB</a>
    <a class="list-group-item" href='/view-student'> GET LAB By Institute</a>
    <a class="list-group-item" href='/view-registration'>GET LAB By Lab Name</a>
    <a class="list-group-item" href='/monthly-registration'> GET LAB By Discipline</a>
    <a class="list-group-item" href='/reset-password'> GET LAB By Asset</a>
    <a class="list-group-item" href='/add-student-admin'> GET LAB By passing keyword</a>
    <a class="list-group-item" href='/update-mess'>GET INSTITUTES</a>
    <a class="list-group-item" href='/change-registration'>GET INSTITUTE By Institute ID</a>
    <a class="list-group-item" href='/cancel-mess'> GET DISCIPLINES</a>
    <a class="list-group-item" href='/complaints'> GET DISCIPLINE BY Discipline ID</a>

    <a class="list-group-item" href='/cancel-mess'> GET EXPERIMENTS</a>
    <a class="list-group-item" href='/cancel-mess'> GET EXPERIMENTS By Experiment ID</a>
    <a class="list-group-item" href='/cancel-mess'> GET SECTIONS</a>
    <a class="list-group-item" href='/cancel-mess'> GET HOSTING INFO</a>
    <a class="list-group-item" href='/cancel-mess'> GET Integration Status</a>
  </div>
</div>
  <div class = "intro-heading" style="text-align:center">
  <h3> Hello, {{data['name']}}! </h3>
  <h4> Email id - {{data['email']}} </h4>
  <h4> Role - {{data['role']}} </h4>
  </div>
</div>
</body>
</html>

#+END_SRC

** Admin Home
#+NAME: admin_home
#+BEGIN_SRC html :tangle app/templates/admin_home.html
<!DOCTYPE html>
<html>
<head>
    <title>HOME</title>
    <meta charset="utf-8">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="static/js/guest.js"></script>
    <link href="../static/css/style.css" rel="stylesheet">


</head>
<body>
    <div class="wrapper">
    <header class="main-header">    
      <nav class="navbar navbar navbar-static-top  navbar-inverse">
      <!-- Sidebar toggle button-->
        <a href="{{ data['email'] }}" class="sidebar-toggle" data-toggle="push-menu" role="button">
          <span class="sr-only">Toggle navigation</span>
        </a>

        <div class="navbar-custom-menu">
          <ul class="nav navbar-nav navbar-right">
            <!-- Messages: style can be found in dropdown.less-->     
            <!-- User Account: style can be found in dropdown.less -->
            <li class="dropdown user dropdown-menu-right user-menu">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                <span class="col-sm-4">{{data['name']}}</span>
              </a>
              <ul class="dropdown-menu">
                <!-- User image -->
                <li class="user-header">
                  <p> 
                    {{data['email']}}
                  </p>
                </li>
                <!-- Menu Footer-->
                <li class="user-footer">
                  <div class="pull-left">
                    <a href="/" class="btn btn-default btn-flat">Home</a>
                  </div>
                  <div class="pull-right">
                    <a href="/logout" class="btn btn-default btn-flat">Sign out</a>
                  </div>
                </li>
              </ul>
            </li>
          </ul>
        
        </div>
      
      </nav>
    </header>

<div class="col-lg-3 col-md-3 col-sm-4">
  <div class="list-group table-of-contents">
    <a class="list-group-item" href="/inactive-list">GET LABS</a>
    <a class="list-group-item" href='/active-list'>GET LAB</a>
    <a class="list-group-item" href='/view-student'> GET LAB By Institute</a>
    <a class="list-group-item" href='/view-registration'>GET LAB By Lab Name</a>
    <a class="list-group-item" href='/monthly-registration'> GET LAB By Discipline</a>
    <a class="list-group-item" href='/reset-password'> GET LAB By Asset</a>
    <a class="list-group-item" href='/add-student-admin'> GET LAB By passing keyword</a>
    <a class="list-group-item" href='/view-mess-bill'>ADD LAB</a>
    <a class="list-group-item" href='/view-student-bill'>UPDATE LAB</a>
    <a class="list-group-item" href='/update-mess'>GET INSTITUTES</a>
    <a class="list-group-item" href='/change-registration'>GET INSTITUTE By Institute ID</a>
    <a class="list-group-item" href='/view_daily_users'>ADD INSTITUTE</a>
    <a class="list-group-item" href='/cancel-mess'> GET DISCIPLINES</a>
    <a class="list-group-item" href='/complaints'> GET DISCIPLINE BY Discipline ID</a>

    <a class="list-group-item" href='/cancel-mess'> ADD DISCIPLINE</a>
    <a class="list-group-item" href='/cancel-mess'> GET EXPERIMENTS</a>
    <a class="list-group-item" href='/cancel-mess'> GET EXPERIMENTS By Experiment ID</a>
    <a class="list-group-item" href='/cancel-mess'> ADD EXPERIMENT</a>
    <a class="list-group-item" href='/cancel-mess'> GET SECTIONS</a>
    <a class="list-group-item" href='/cancel-mess'> ADD SECTION</a>
    <a class="list-group-item" href='/cancel-mess'> GET HOSTING INFO</a>
    <a class="list-group-item" href='/cancel-mess'> DELETE LAB</a>
    <a class="list-group-item" href='/cancel-mess'> ADD Hosting Info</a>
    <a class="list-group-item" href='/cancel-mess'> GET Integration Status</a>
    <a class="list-group-item" href='/cancel-mess'> ADD Integration Status
	</a>
  </div>
</div>
  <div class = "intro-heading" style="text-align:center">
  <h3> Hello, {{data['name']}}! </h3>
  <h4> Email id - {{data['email']}} </h4>
  <h4> Role - {{data['role']}} </h4>
  </div>
</div>
</body>
</html>

#+END_SRC
** Not Autherized Page
#+NAME: auth_req
#+BEGIN_SRC html :tangle app/templates/auth_req.html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Not Autherized</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:400,300,500,600,700|Nosifer">

    <link href="../static/css/style.css" rel="stylesheet">
</head>
<body>
            <section id="auth_req" class="section-space-padding pattern-bg-auth">
              <div class="container auth-container">
                    
                 <div class="section-title-auth">
                   <h1><span>OOPs!</span></h1>
                  </div>
                        <div class="auth-us">
                          <p>It seems that the email with you tried to log in our system was not registered in our database and if it was there then your data seems to be misplaced, so you are not autherized to proceed further. Inorder to register yourself or sort the problem with your account, send us an email to admin@gmail.com specifying your details, we will be contacting you shortly. </p>
                        </div>
                    </div>
                     
                    </div>
                </div>
            </section>
</body>
</html>
#+END_SRC
** Error 404 page
#+NAME: 404
#+BEGIN_SRC html :tangle app/templates/404.html
<!DOCTYPE html>
<html lang="en-US">
<head>
    <meta charset="UTF-8">
    <title>Error 404</title>
    <link rel="stylesheet" href="{{url_for('static', filename='404/styles/404.css')}}">
</head>
<body>
<div class="wrapper row2">
  <div id="container" class="clear">
    <section id="fof" class="clear">
      <div class="positioned">
        <div class="hgroup">
          <h1>Congratulations!</h1>
          <h2>You Found The End Of Our Little Infinite Universe.</h2>
        </div>
        <p>Jokes Aside<br/>
          The Page You Requested Could Not Be Found On Our Server</p>
                </div>
    </section>  
  </div>
</div>

</body>
</html>
#+END_SRC
* JS
** login
This function checks whether the user trying to login
is there is the database or not.If the user is there
in the database, page is redirected to google,else
error is shown that user is not availed to LDS.
#+NAME: login
#+BEGIN_SRC javascript :tangle app/static/js/login.js

#+END_SRC
** guest
This function checks whether the user trying to login
is there is the database or not.If the user is there
in the database, page is redirected to google,else
error is shown that user is not availed to LDS.
#+NAME: guest
#+BEGIN_SRC javascript :tangle app/static/js/guest.js

#+END_SRC

* Infra                                                         :boilerplate:

  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from flask import Blueprint, Flask, url_for, redirect, \
    render_template, session, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, login_required, login_user, \
    logout_user, current_user, UserMixin
from requests_oauthlib import OAuth2Session
from requests.exceptions import HTTPError
from app import app, db, login_manager,requires_guest_auth,requires_admin_auth
from app.users.models import User, Roles
import os
import json
import re
import time
from sqlalchemy.exc import IntegrityError

api = Blueprint('users', __name__)

#+end_src
    
    


*** Init File
#+NAME: init_file
#+BEGIN_SRC python :tangle app/users/__init__.py

#+END_SRC
* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle app/users/controllers.py :eval no :noweb yes

<<imports_for_sources>>
<<serve_index_html>>
<<oauth_session_creation>>
<<check_email>>
<<callback_google_api>>
<<google_oauth_configuration>>
<<logout_route>>
<<add_user>>
<<add_role>>
<<show_users>>
<<show_roles>>
<<delete_user>>
<<delete_role>>
<<update_user>>
#+END_SRC
   


