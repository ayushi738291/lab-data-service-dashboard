#+TITLE: Web Frontend for Lab Data Service Dashboard
#+AUTHOR: VLEAD
#+DATE: [2017-06-05 Mon]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of Web Frontend for LDS.
* JS
** Auth API

#+NAME: auth_api
#+BEGIN_SRC js 
var AuthAPI = {

  home: function() {
	  window.location.href = '/';
  },

  login: function() {
    window.location.href = '/login';
  },

  logout: function() {
    window.location.href = '/logout';
  },

};

#+END_SRC

** Get JSON

#+NAME: get_json
#+BEGIN_SRC js 
var getJSON = function() {
  $.ajax({
    url:'static/js/main.json',
    dataType:'json',
    async: false,
    success: function(response) {
      data = response['divisions_spec']
      //console.log(data);
    },
    error: function() {
      data = null;
      //console.log('Lover of time');
    }
  });
  return data;
};

#+END_SRC

** Logged In
This is to check whether a user is logged into LDS or not.This
function returns true if the user is logged in and returns false
if the user is not logged in.
#+NAME: logged_in
#+BEGIN_SRC js 
var is_logged_in = function() {
	$.ajax({
		url:'logged_in',
		type: 'GET',
		contentType:'charset=UTF-8',
		async: false,
		success: function(response) {
			logged = true;
		},
		error: function(response) {
			logged = false;
		} 
	});
	return logged;
};

#+END_SRC

** Hash to Handler Map
=hash_to_handlers= is an object which maps a =hash= to a 
=handler= so that when the hash is changed, appropriate
handler is called.

#+NAME: hash_to_handlers_map
#+BEGIN_SRC js
hash_to_handlers_map = {home:'home'};

var handlers_map = function () {
  var select = document.querySelectorAll('[id^="home-btn-"]');
  [].forEach.call(select, function (hash_name) {
    var id = hash_name.id.slice(9);
    hash_to_handlers_map[id.valueOf()] = id;
  });
};

#+END_SRC
** Show and Hide containers.
We can either show or hide the containers depending on our
requirements. For example,if we want to Add a User,we can
hide all the containers and display only the Add User
container.
#+NAME: show_hide
#+BEGIN_SRC js 
function show_all_containers() {
    var containers = document.querySelectorAll('[id$="-container"]');
  [].forEach.call(containers, function(container) {
      container.classList.remove('hidden');
  });
}

function hide_all_containers() {
  var containers = document.querySelectorAll('[id$="-container"]');
  [].forEach.call(containers, function(container) {
      container.className = 'hidden';
  });
};

#+END_SRC

** Index Handler
Whenever hash is changed to 'index', index_handler function
is called which hides all the other conatainers and displays
only index page based on whether the user is logged in or not.
#+NAME: index_handler
#+BEGIN_SRC js
var index_handler = function() {
  var logged = is_logged_in();
  var auth_btn = $('#login-logout-btn')[0];
  var span_btn = $('#login-logout-spn')[0];
  if (logged) {
    get_users();
    get_roles();
    show_one_container('side-nav-container');
    load_role_users();
    auth_btn.onclick = AuthAPI.logout;
    auth_btn.innerHTML = span_btn.outerHTML + '  ' + ' LOGOUT';
    span_btn = $('#login-logout-spn')[0];
    span_btn.className = 'glyphicon glyphicon-log-out';
  }
  else {
    hide_all_containers();
    auth_btn.onclick = AuthAPI.login;
    auth_btn.innerHTML = span_btn.outerHTML + '  ' + ' LOGIN';
    span_btn = $('#login-logout-spn')[0];
    span_btn.className = 'glyphicon glyphicon-log-in';
  }
};

#+END_SRC
** Get Users
AJAX call is made to the backend server to get the users availed
to LDS.
#+NAME: get_users
#+BEGIN_SRC js
var get_users = function() {
    $.ajax({
      url: 'users',
      type: 'GET',
      contentType: 'charset=UTF-8',
      async: false,
      success: function (response) {
        users_List = response.users;
      },
      error: function (response) {
        users_List = null;
      }
    });
};

#+END_SRC
** Get Roles
AJAX call is made to the backend server to get the roles availed
to LDS.
#+NAME: get_roles
#+BEGIN_SRC js
var get_roles = function() {
    $.ajax({
      url: 'roles',
      type: 'GET',
      contentType: 'charset=UTF-8',
      async: false,
      success: function (response) {
        roles_List = response.roles;
      },
      error: function (response) {
        roles_List = null;
      }
    });
}; 

#+END_SRC

** Delete User
AJAX call is made to the backend server to delete a user availed
to LDS.
#+NAME: delete_user
#+BEGIN_SRC js
var remove_users = function (button) {
$(document).on('click', '#'+button.id, function(clickEvent) {
    var data = JSON.stringify({
      user_email: $('#'+button.id).attr('email')
    });
    $.ajax({
      url: 'delete_user',
      data: data,
      type: 'POST',
      contentType: 'application/json;charset=utf-8',
      async: false,
      success: function (response) {
        get_users();
        window.alert ('User was deleted.');
        populate_tables_update();
        updateHelperFunction();
      },
      error: function (response) {
        window.alert ('There was an error deleting the user, please check the information you provided.');
      }
    });
});
}

#+END_SRC
** Navigate
We can navigate and get the present hashes at any point of time
using the functions below.
#+NAME: navigate
#+BEGIN_SRC js
var get_window_hash_path = function() {
  var hash = window.location.href.split('#')[1] || '';
};

var navigate = function(path) {
  var current = window.location.href;
  window.location.href = current.replace(/#(.*)$/, '') + '#' + path;
};

#+END_SRC
** Onload
Whenever the page refreshes or loads again, the following functions 
are called. Appropriate HTML is generated based on the hash.
#+NAME: onload
#+BEGIN_SRC js
window.onload = function() {
  hide_all_containers();
  index_handler();
  get_window_hash_path();
  attachDivsionsToBody(createDivisions());
};

#+END_SRC  
** Docoding a JSON
   These functions take a JSON object,decodes the JSON and generates the
specific HTML. Basic idea is to automate things. You just have to give JSON
specifications and all the HTML gets generated with least amount of efforts.

#+NAME: Decoding_json
#+BEGIN_SRC json :tangle ./app/static/js/main.js
var createElements = function(element) {
  var new_ele = document.createElement(element['typeofdiv']);
  for (var i in element)
    if(i!="elements" && i!="typeofdiv")
    new_ele[i] = element[i];

  if(element['elements'])
  {
    element['elements'].forEach(function(ele) {
    var temp_element = createElements(ele);
      new_ele.append(temp_element)
    });
  }
  return new_ele;
};

var createDivisions = function() {
  return divisions_spec.map(createElements);
};
var attachDivsionsToBody = function(divisions) {
  divisions.forEach(function(division) {
    document.getElementsByTagName("body")[0].appendChild(division);
  });
};

#+END_SRC

* JSON
** JSON
   This is a JSON file in which we have given necessary specifications to
generate HTML to add a user to the database.

#+NAME: JSON_spec_file
#+BEGIN_SRC json :tangle ./app/static/js/main.json

var divisions_spec = [
  
  {
    "typeofdiv":"div",
    "id": "add-user-container",
    "class":"hidden",
    "elements": [
      {
	"typeofdiv": "p",
	"innerHTML":"Add User"
      },
      {
	"typeofdiv": "ul",
	"id":"add-user",
	"elements":[
	  {
	    "typeofdiv": "li",
	    "elements":[
	      {
		"typeofdiv": "label",
		"id": "name_label",
		"innerText": "Name:"
	      },

	      {
		"typeofdiv": "input",
		"id": "name-box",
		"type": "text"
	      }
	    ]
	  },

	  {
	    "typeofdiv": "li",
	    "elements":[
	      {
		"typeofdiv": "label",
		"id": "email_label",
		"innerText": "Email:"
	      },

	      {
		"typeofdiv": "input",
		"id": "email-box",
		"type": "text"
	      }
	    ]
	  },


	  {
	    "typeofdiv": "li",
	    "elements":[
	      {
		"typeofdiv": "label",
		"id": "role_label",
		"innerText": "Role:"
	      },

	      {
		"typeofdiv": "input",
		"id": "role-box",
		"type": "text"
	      }
	    ]
	  },
	  {
	    "typeofdiv": "li",
	    "elements":[
	      {
		"typeofdiv": "button",
		"id": "add",
		"value": "Add",
		"onclick":""
	      },

	      {
		"typeofdiv": "button",
		"id": "cancel",
		"value": "Cancel",
		"onclick":""
	      }
	    ]
	  }
	]
      },


      {
	"typeofdiv": "label",
	"id": "error-box",
	"value": "Error"
      }
    ]
  }
]

#+END_SRC
