#+TITLE: The REST API for Lab Data Service Dashboard
#+AUTHOR: VLEAD
#+DATE: [2017-06-05 Mon]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API.

* REST
** Serve index.html
#+NAME: serve_index_html
#+BEGIN_SRC python 

@api.route("/", methods=['GET'])
def index():
    return render_template("index.html")
#+END_SRC

** Login API
   API to login to the application.
*** API Design
  - URL :: /login
  - Method :: GET
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/login
    #+END_EXAMPLE
*** =Login= API
    When user clicks on =login= button from f/e it will invoke =/login= api and
    thereby it will forward request to =google=. User must sign in using it's 
    google credentials which is then stored in our database.
#+NAME: oauth_session_creation
#+BEGIN_SRC python 

def get_google_auth(state=None, token=None):
    if token:
        return OAuth2Session(Auth.CLIENT_ID, token=token)
    if state:
        return OAuth2Session(
            Auth.CLIENT_ID,
            state=state,
            redirect_uri=Auth.REDIRECT_URI)
    oauth = OAuth2Session(
        Auth.CLIENT_ID,
        redirect_uri=Auth.REDIRECT_URI,
        scope=Auth.SCOPE)
    return oauth
#+END_SRC

#+NAME: login_route
#+BEGIN_SRC python

@api.route('/login', methods=["GET"])
def login():
    if current_user.is_authenticated:
        return render_template('index.html')
    google = get_google_auth()
    auth_url, state = google.authorization_url(
        Auth.AUTH_URI, access_type='offline')
    session['oauth_state'] = state
    return render_template('login.html', auth_url=auth_url)
 #+END_SRC

*** Google Callback response =API=
    - Once the Google verfies the user credentials it will send callback
      response to =/authorized= api which should be registered at google's
      dashboard as one of Authorized redirect URIs

    - Once google authenticates the user, =userdirectory= application will
      authorize the user to use the application.

#+NAME: callback_google_api
#+BEGIN_SRC python

@api.route('/gCallback')
def callback():
    if current_user is not None and current_user.is_authenticated:
        return redirect("/")
    if 'error' in request.args:
        if request.args.get('error') == 'access_denied':
            return 'You have been denied access.'
        return 'Error encountered.'
    if 'code' not in request.args and 'state' not in request.args:
        return redirect("login")
    else:
        google = get_google_auth(state=session.get('oauth_state'))
        try:
            token = google.fetch_token(
                Auth.TOKEN_URI,
                client_secret=Auth.CLIENT_SECRET,
                authorization_response=request.url)
        except HTTPError:
            return 'HTTPError occurred.'
        google = get_google_auth(token=token)
        resp = google.get(Auth.USER_INFO)
        data = resp.json()
        if resp.status_code == 200:
            email = data['email']
            user = User.query.filter_by(email=email).first()
            if user is None:
                user = User()
                user.email = email
                user.role = "guest"
                user.name = data['name']
                db.session.add(user)
                role_list = Roles.query.filter_by(role_name=user.role).first()
                if role_list is not None:
                    db.session.commit()
                else:
                    jsonify(success=False, message="Role not available"), 400
            login_user(user)
            return redirect("/")    
        return 'Could not fetch your information.'


#+END_SRC

*** Google OAuth Credentials
    Google OAuth service required URLs (Credentials) should be specified

#+NAME: google_oauth_configuration
#+BEGIN_SRC python

class goauth:
    CLIENT_ID = "Your client ID"
    CLIENT_SECRET = "Your client secret"
    REDIRECT_URI = 'https://localhost:5000/gCallback'
    AUTH_URI = 'https://accounts.google.com/o/oauth2/auth'
    TOKEN_URI = 'https://accounts.google.com/o/oauth2/token'
    USER_INFO = 'https://www.googleapis.com/userinfo/v2/me'
    SCOPE = ['https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email'

#+END_SRC

** Logout API
   When user clicks on =logout= button from f/e it will invoke =/logout= api
   and thereby it will destroy all session variables.

*** API Design

  - URL :: /logout
  - Method :: GET
  - URL Params ::  None
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/logout
    #+END_EXAMPLE

*** Implementation

#+NAME: logout_route
#+BEGIN_SRC python

@api.route('/logout', methods=["GET"])
@login_required
def logout():
    if session.get('_id') is not None:
        try:
            logout_user()
            session.clear()
            return redirect("/")
        except:
            msg = {"status": "failure", 
                       "msg": "Some Error Occured, Try Again"}
            return jsonify(msg)
    else:
        return redirect("/")

** Add User
   API to add a User
*** API Design
 - URL :: /add_user
  - Method :: POST
  - Success Response ::
    + Code: 200
  - URL Params ::
    {
      "name":"test",
      "email":"test@gmail.com"
      "role" : "admin"
    }
  - Example ::
    #+BEGIN_EXAMPLE
     http://localhost:5000/add_user?name=test&email=test@g.com&role=admin
    #+END_EXAMPLE
*** Implementation
Only Admin has the right to add a user and assign role to him. To add a user =Name= , =Email= and =Role= fields are required.
Implementation of the =Add User API= is given below.
#+NAME: add_user
#+BEGIN_SRC python 

@api.route('/add_user', methods=['POST'])
@login_required
def create_user():
    try:
        temp = json.loads(request.data)
        email = json.dumps(temp['email'])
        name = json.dumps(temp['name'])
        role = json.dumps(temp['role'])
    except:
        try:
            email = request.args('email')
            name = request.args('name')
            role = request.args('role')
        except KeyError as e:
            return jsonify(success=False, message="%s not sent in the request" % e.args), 400
            
    match = re.match(r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)", full)
    if match is not None:
        clean = filter(None, match.groups())
    else:
        return jsonify(success=False, message="Please enter a valid email"), 400         
    
	role_id = Roles.query.filter(Roles.role_name==role).first()
	if role_id is not None:
		return jsonify(success=False, message="Role does not exist"), 400
    u = User()
    u.name = name
    u.email = email
    db.session.add(u)
    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="This email already exists"), 500

    return jsonify(success=True)
#+END_SRC

** Add Role
API to add a role
*** API Design
 - URL :: /add_role
  - Method :: POST
  - Success Response ::
    + Code: 200
  - URL Params ::
    {
      "role_name":"admin"
    }
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/add_role?role_name=admin
    #+END_EXAMPLE
*** Implementation
Admin has the right to add a role thus restricting the access to the LDS servive.To add a role =role_name= field should be given.
Implementation of the =Add Role= API is given below.
#+NAME: add_role
#+BEGIN_SRC python 

@api.route('/add_role', methods=['POST'])
@login_required
def create_role():
    try:
        name = request.args['name']
    except KeyError as e:
        return jsonify(success=False, message="%s not sent in the request" % e.args), 400

    u = Roles(name)
    print u
    db.session.add(u)
    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="This role already exists"), 500
	
    return jsonify(success=True)
#+END_SRC
** Show users
API for show users
*** API Design
 - URL :: /users
  - Method :: GET
  - URL Params ::  None
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/users
    #+END_EXAMPLE

*** Implementation
This API shows the list of all users who are registered for the LDS.
The implementation is given below.

#+NAME: show_users
#+BEGIN_SRC python 

@api.route('/users', methods=['GET'])
@login_required
def show_users():
	users = User.query.all()
	allusers = []
	for i in users:
		temp = i.to_dict()
		allusers.append(temp)
	return jsonify(success=True,users=allusers)

#+END_SRC
** Show roles
*** API Design
 - URL :: /roles
  - Method :: GET
  - URL Params ::  None
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/roles
    #+END_EXAMPLE

*** Implementation
This API returns the list of all the roles in the LDS.
Implementation of =show role= API is given below
#+NAME: show_roles
#+BEGIN_SRC python

@api.route('/roles', methods=['GET'])
@login_required
def show_roles():
	roles = Roles.query.all()
	allroles = []
	for i in roles:
		temp = i.to_dict()
		allroles.append(temp)
	return jsonify(success=True,roles=allroles)
#+END_SRC

** Delete User
   API for Delete User
*** API Design
  - URL :: /delete_user
  - Method :: POST
  - URL Params ::  
    {
       "email" : "test@gmail.com"
    }
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/delete_user?email=test@gmail.com
    #+END_EXAMPLE
*** Implementation
    Admin also has the right to delete a user. To delete a user =email= should be given as the field to delete a particular user.

#+NAME: delete_user
#+BEGIN_SRC python 

@api.route('/delete_user', methods=['POST'])
@login_required
def delete_user():
    try:
        email = request.args['user_email']
    except KeyError as e:
        return jsonify(success=False, message="%s not sent in the request" % e.args), 400
    user_todel = User.query.filter(User.email==email).first()
    if user_todel is None:
        return jsonify(success=False, message="This email does'nt exists"), 400

    db.session.delete(user_todel) 
    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="could'nt delete the user"), 500
    return jsonify(success=True)
#+END_SRC
** Delete Role
   API to Delete a Role
*** API Design
 - URL :: /delete_role
  - Method :: POST
  - URL Params ::  
    {
       "role_name" : "admin"
    }
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/delete_role?role_name=admin
    #+END_EXAMPLE
*** Implementation
    Admin has the right to delete a role. To delete a role, =role_name= 
    should be sent as an argument.
    Implementation of =delete role= is given below.
#+NAME: delete_role
#+BEGIN_SRC python

@api.route('/delete_role', methods=['POST'])
@login_required	
def delete_role():
    try:
        role_name = request.args['role_name']
    except KeyError as e:
        return jsonify(success=False, message="%s not sent in the request" % e.args), 400
    role_todel = Roles.query.filter(Roles.role_name==role_name).first()
    if role_todel is None:
        return jsonify(success=False, message="This role does not exists"), 400
    db.session.delete(role_todel)
    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="could not delete"), 500
    return jsonify(success=True)

#+END_SRC

** Update User
   API to Update a User
*** API Design
 - URL :: /update_user
  - Method :: POST
  - URL Params ::  
    {
       "email" : "test@gmail.com"
       "new_email" : "test1@gmail.com"
       "new_role" : "admin"
       "new_name" : "test1"
    }
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/update_user?email=test@gmail.com&new_email=test1&gmail.com&new_name=test2&new_role=admin
    #+END_EXAMPLE
*** Implementation
    Admin has the right to edit the details of a student who is registered 
    for the Lab Data Service. He can edit any of the details =name=,=email=
    or =role=.
    The implementation is given below.
#+NAME: update_user
#+BEGIN_SRC python

@api.route('/update_user', methods=['POST'])
@login_required
def update_user():
    try:
        email = request.args['email']
        new_name = request.args['new_name']
        new_email = request.args['new_email']
        new_role = request.args['new_role']
    except KeyError as e:
        return jsonify(success=False, message="%s not sent in the request" % e.args), 400
    user_toupdate = User.query.filter(User.email==email).first()
    if user_toupdate is None:
        return jsonify(success=False, message="This email doesn't exists"), 400

    check_role = Roles.query.filter(Roles.role_name==new_role).first()
    if check_role is None:
        return jsonify(success=False, message="Role doesn't exist"), 400
    user_toupdate.name = new_name
    user_toupdate.email = new_email
    user_toupdate.role = new_role

    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="Could not update the user"), 400

    return jsonify(success=True)
#+END_SRC

								:boilerplate:

* Infra                                                         :boilerplate:


** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from flask import Blueprint, Flask, url_for, redirect, \
    render_template, session, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, login_required, login_user, \
    logout_user, current_user, UserMixin
from requests_oauthlib import OAuth2Session
from requests.exceptions import HTTPError
from app import app, db, login_manager
from app.users.models import User, Roles
import os
import json
import re
import time

api = Blueprint('users', __name__)

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': 'sqlite:///' + os.path.join(basedir, "app.db"),
         'DATABASE_CONNECT_OPTIONS': {},
         'SQLALCHEMY_TRACK_MODIFICATIONS': False,         
	}
#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes

<<imports_for_sources>>
<<serve_index_html>>
<<oauth_session_creation>>
<<callback_google_api>>
<<google_oauth_configuration>>
<<logout_route>>
<<add_user>>
<<add_role>>
<<show_users>>
<<show_roles>>
<<delete_user>>
<<delete_role>>
<<update_user>>
#+END_SRC


** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>

<<run_test_cases>>
#+end_src
