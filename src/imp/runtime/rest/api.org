#+TITLE: The REST API for Lab Data Service Dashboard
#+AUTHOR: VLEAD
#+DATE: [2017-06-05 Mon]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API.

* REST
** Serve index.html
#+NAME: serve_index_html
#+BEGIN_SRC python 

@api.route("/", methods=['GET'])
def index():
    return render_template("index.html")
#+END_SRC

** Login API
   API to login to the application.
*** API Design
  - URL :: /login
  - Method :: GET
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/login
    #+END_EXAMPLE
*** =Login= API
    When user clicks on =login= button from f/e it will invoke =/login= api and
    thereby it will forward request to =google=. User must sign in using it's 
    google credentials which is then stored in our database.
#+NAME: oauth_session_creation
#+BEGIN_SRC python 

def get_google_auth(state=None, token=None):
    if token:
        return OAuth2Session(Auth.CLIENT_ID, token=token)
    if state:
        return OAuth2Session(
            Auth.CLIENT_ID,
            state=state,
            redirect_uri=Auth.REDIRECT_URI)
    oauth = OAuth2Session(
        Auth.CLIENT_ID,
        redirect_uri=Auth.REDIRECT_URI,
        scope=Auth.SCOPE)
    return oauth
#+END_SRC

#+NAME: check_email
#+BEGIN_SRC python
@mod_users.route('/check_valid', methods=['POST'])
def check_valid():
	try:
		email = request.args['email']
	except:
		try:
			email = request.form['email']
		except KeyError as e:
			return jsonify(success=False, message="%s not sent in the request" % e.args), 400
    
	user_tocheck = User.query.filter(User.email==email).first()
	if user_tocheck is None:
		return jsonify(success=False, message="This User is not availed to LDS")
	
	return jsonify(success=True, message="This User is availed to LDS")
#+END_SRC

#+NAME: login_route
#+BEGIN_SRC python
@api.route('/login', methods=["GET"])
def login():
    if current_user.is_authenticated:
        return render_template('index.html')
    google = get_google_auth()
    auth_url, state = google.authorization_url(
        Auth.AUTH_URI, access_type='offline')
    session['oauth_state'] = state
    return render_template('login.html', auth_url=auth_url)
 #+END_SRC

*** Google Callback response =API=
    - Once the Google verfies the user credentials it will send callback
      response to =/authorized= api which should be registered at google's
      dashboard as one of Authorized redirect URIs

    - Once google authenticates the user, =userdirectory= application will
      authorize the user to use the application.

#+NAME: callback_google_api
#+BEGIN_SRC python

@api.route('/gCallback')
def callback():
    if current_user is not None and current_user.is_authenticated:
        print "I am here :)"
        return redirect("/")
    if 'error' in request.args:
        if request.args.get('error') == 'access_denied':
            return 'You have been denied access.'
        return 'Error encountered.'
    if 'code' not in request.args and 'state' not in request.args:
        return redirect("login")
    else:
        google = get_google_auth(state=session.get('oauth_state'))
        try:
            token = google.fetch_token(
                Auth.TOKEN_URI,
                client_secret=Auth.CLIENT_SECRET,
                authorization_response=request.url)
        except HTTPError:
            return 'HTTPError occurred.'
        google = get_google_auth(token=token)
        resp = google.get(Auth.USER_INFO)
        data = resp.json()
        if resp.status_code == 200:
            email = data['email']
            user = User.query.filter_by(email=email).first()
            if user is None:
                user = User()
                user.email = email
                user.role = "guest"
                user.name = data['name']
                db.session.add(user)
                role_list = Roles.query.filter_by(role_name=user.role).first()
                if role_list is not None:
                    db.session.commit()
                else:
                    return jsonify(success=False, message="Role not available"), 400
            login_user(user)
            return redirect("/")    
        return 'Could not fetch your information.'
#+END_SRC

*** Google OAuth Credentials
    Google OAuth service required URLs (Credentials) should be specified

#+NAME: google_oauth_configuration
#+BEGIN_SRC python

class goauth:
    CLIENT_ID = "Your client ID"
    CLIENT_SECRET = "Your client secret"
    REDIRECT_URI = 'https://localhost:5000/gCallback'
    AUTH_URI = 'https://accounts.google.com/o/oauth2/auth'
    TOKEN_URI = 'https://accounts.google.com/o/oauth2/token'
    USER_INFO = 'https://www.googleapis.com/userinfo/v2/me'
    SCOPE = ['https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email'

#+END_SRC

** Logout API
   When user clicks on =logout= button from f/e it will invoke =/logout= api
   and thereby it will destroy all session variables.

*** API Design

  - URL :: /logout
  - Method :: GET
  - URL Params ::  None
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/logout
    #+END_EXAMPLE

*** Implementation

#+NAME: logout_route
#+BEGIN_SRC python

@api.route('/logout', methods=["GET"])
@login_required
def logout():
    if session.get('_id') is not None:
        try:
            logout_user()
            session.clear()
            return redirect("/")
        except:
            msg = {"status": "failure", 
                       "msg": "Some Error Occured, Try Again"}
            return jsonify(msg)
    else:
        return redirect("/")
#+END_SRC
** Add User
   API to add a User
*** API Design
  - URL :: /add_user
  - Method :: POST
  - Success Response ::
    + Code: 200
  - URL params ::
    {
      "name":"test",
      "email":"test@gmail.com"
      "role" : "admin"
    }
  - Example ::
    #+BEGIN_EXAMPLE
     http://localhost:5000/add_user?name=test&email=test@g.com&role=admin
    #+END_EXAMPLE

*** Implementation
Only Admin has the right to add a user and assign role to him. To add a user =Name= , =Email= and =Role= fields are required.
Implementation of the =Add User API= is given below.

#+NAME: add_user
#+BEGIN_SRC python 
@mod_users.route('/add_user', methods=['POST'])
@login_required
@requires_admin_auth
def create_user():

    try:
        temp = json.loads(request.data)
        email = temp['email']
        name = temp['name']
        role = temp['role']
    except:
        try:
            email = request.args.get('email')
            name = request.args.get('name')
            role = request.args.get('role')
        except KeyError as e:
            return jsonify(success=False, message="%s not sent in the request" % e.args), 400

    if not (name or email or role):
        return jsonify(success=False, message="Arguments not provided"), 400

    try:
        match = re.match(r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)", email)
        if match is None:
            return jsonify(success=False, message="Please enter a valid email"), 400         
    except:
        return jsonify(success=False, message="Arguments went missing"), 400

    check_role = Roles.query.filter(Roles.role_name==role).first()
    if check_role is None:
        return jsonify(success=False, message="Role doesn't exist"), 400

    u = User()
    u.name = name
    u.email = email
    u.role = role
    db.session.add(u)
    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="This email already exists"), 500

    return jsonify(success=True)

#+END_SRC

*** Test Cases
**** Test Add User

#+NAME: test_add_user
#+BEGIN_SRC python
class TestAddUser(TestCase):
    TESTING = True
    def create_app(self):
        app = Flask(__name__)
        app.register_blueprint(mod_users, url_prefix=None)
        app.config.from_object("config")
        app.config['TESTING'] = True
        login_manager = LoginManager(app)
        login_manager.login_view = "users.login"
        self.app = app.test_client()
        db.init_app(app)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_user_1(self):
		print "test_add_user_1"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), 
                                        headers=headers)
		payload = {
                    'name': 'Test1',
		            'email': 'test1@gmail.com',
		            'role': 'admin'
		          }
		headers = {'Content-Type': 'application/json'}

		response = self.client.post("/add_user", data=json.dumps(payload), 
                                        headers=headers)

		self.assertEqual(response.status_code, 200)

    def test_add_user_2(self):
        print "test_add_user_2"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload),
                                        headers=headers)
    
        payload = {
                    'name': 'Test2',
                    'email': 'te@st2@gmailcom',
                    'role': 'admin'
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/add_user", data=json.dumps(payload),
                                        headers=headers)

        self.assertEqual(response.status_code, 400)

    def test_add_user_3(self):
        print "test_add_user_3"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload),
                                        headers=headers)
    
        payload = {
                    'email': 'test3@gmail.com',
                    'role': 'admin'
                  }
        headers = {'Content-Type': 'application/json'}
        #data=json.dumps(payload)
        #temp = json.loads(data)
        #email = temp['email']
        #print email

        response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

        self.assertEqual(response.status_code, 400)

    def test_add_user_4(self):
        print "test_add_user_4"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
    
        payload = {
                    'name': 'Test4',
                    'email': 'test4@gmail.com',
                    'role': 'developer'
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

        self.assertEqual(response.status_code, 400)

    def test_add_user_5(self):
        print "test_add_user_5"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
    
        payload = {
                    'name': 'Test5',
                    'role': 'admin'
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

        self.assertEqual(response.status_code, 400)

    def test_add_user_6(self):
        print "test_add_user_6"
        payload = {'name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
    
        payload = {
                    'name': 'Test6',
                    'email': 'test6@gmail.com',
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

        self.assertEqual(response.status_code, 400)

    def test_add_user_7(self):
        print "test_add_user_7"
        payload = {'name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
    
        payload = {
                    'name': 'Test7',
                    'email': 'test7@gmail.com',
                    'role': ''
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

        self.assertEqual(response.status_code, 400)
#+END_SRC
** Add Role
API to add a role
*** API Design
 - URL :: /add_role
  - Method :: POST
  - Success Response ::
    + Code: 200
  - URL Params ::
    {
      "role_name":"admin"
    }
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/add_role?role_name=admin
    #+END_EXAMPLE
*** Implementation
Admin has the right to add a role thus restricting the access to the LDS servive.To add a role =role_name= field should be given.
Implementation of the =Add Role= API is given below.
#+NAME: add_role
#+BEGIN_SRC python 
@mod_users.route('/add_role', methods=['POST'])
@login_required
@requires_admin_auth
def create_role():
    try:
        temp = json.loads(request.data)
        name = temp['role_name']
    except:
        try:
            name = request.args['role_name']
        except KeyError as e:
            return jsonify(success=False, message="%s not sent in the request" % e.args), 400

    if not name:
        return jsonify(success=False, message="No role provided"), 400

    u = Roles(name)
    db.session.add(u)
    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="This role already exists"), 500
	
    return jsonify(success=True)


#+END_SRC
*** Test Cases
**** Test Add Role
#+NAME: test_add_role
#+BEGIN_SRC python
class TestAddRole(TestCase):
    TESTING = True
    def create_app(self):
        app = Flask(__name__)
        app.register_blueprint(mod_users, url_prefix=None)
        app.config.from_object("config")
        app.config['TESTING'] = True
        login_manager = LoginManager(app)
        login_manager.login_view = "users.login"
        self.app = app.test_client()
        db.init_app(app)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_role_1(self):
        print "test_add_role_1"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
        self.assertEqual(response.status_code, 200)

    def test_add_role_2(self):
        print "test_add_role_2"
        payload = {'role_name': ''}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
        self.assertEqual(response.status_code, 400)    

    def test_add_role_3(self):
        print "test_add_role_3"
        payload = {'role_name': None}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
        self.assertEqual(response.status_code, 400)
#+END_SRC
** Show users
API for show users
*** API Design
 - URL :: /users
  - Method :: GET
  - URL Params ::  None
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/users
    #+END_EXAMPLE

*** Implementation
This API shows the list of all users who are registered for the LDS.
The implementation is given below.

#+NAME: show_users
#+BEGIN_SRC python 

@mod_users.route('/users', methods=['GET'])
@login_required
@requires_admin_auth
def show_users():
	users = User.query.all()
	allusers = []
	for i in users:
		temp = i.to_dict()
		allusers.append(temp)
	return jsonify(success=True,users=allusers)
#+END_SRC
*** Test Cases
**** Test Show users
#+NAME: test_show_users
#+BEGIN_SRC python
class TestShowUsers(TestCase):
	TESTING = True
	def create_app(self):
		app = Flask(__name__)
		app.register_blueprint(mod_users, url_prefix=None)
		app.config.from_object("config")
		app.config['TESTING'] = True
		login_manager = LoginManager(app)
		login_manager.login_view = "users.login"
		self.app = app.test_client()
		db.init_app(app)
		return app

	def setUp(self):
		db.create_all()

	def tearDown(self):
		db.session.remove()
		db.drop_all()
		
	def test_show_user_1(self):
		print "test_show_user_1"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
		
		payload = {'name': 'Test1',
			       'email': 'test1@gmail.com',
		           'role' : 'admin'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

		response = self.client.get("/users", headers=headers)
		
		self.assertEqual(response.status_code, 200)

	def test_show_user_2(self):
		print "test_show_user_2"
		payload = {'name': 'admin'}
		headers = {'Content-Type': 'application/json'}
        
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
    
		payload = {
                    'name': 'Test2',
                    'email': 'test2@gmail.com',
                    'role': ''
                  }
		headers = {'Content-Type': 'application/json'}

		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

		response = self.client.get("/users", headers=headers)
		self.assertEqual(response.status_code, 200)

	def test_show_user_3(self):
		print "test_show_user_3"
		response = self.client.get("/users")
		self.assertEqual(response.status_code, 200)
#+END_SRC
** Show roles
*** API Design
 - URL :: /roles
  - Method :: GET
  - URL Params ::  None
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/roles
    #+END_EXAMPLE

*** Implementation
This API returns the list of all the roles in the LDS.
Implementation of =show role= API is given below
#+NAME: show_roles
#+BEGIN_SRC python
@mod_users.route('/roles', methods=['GET'])
@login_required	
@requires_admin_auth
def show_roles():
    roles = Roles.query.all()
    allroles = []
    for i in roles:
        temp = i.to_dict()
        allroles.append(temp)
    return jsonify(success=True,roles=allroles)

#+END_SRC

*** Test Cases
**** Test Show Roles
#+NAME: test_show_roles
#+BEGIN_SRC python
class TestShowRole(TestCase):
	TESTING = True
	def create_app(self):
		app = Flask(__name__)
		app.register_blueprint(mod_users, url_prefix=None)
		app.config.from_object("config")
		app.config['TESTING'] = True
		login_manager = LoginManager(app)
		login_manager.login_view = "users.login"
		self.app = app.test_client()
		db.init_app(app)
		return app

	def setUp(self):
		db.create_all()

	def tearDown(self):
		db.session.remove()
		db.drop_all()

	def test_show_roles_1(self):
		print "test_show_roles_1"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
		
		response = self.client.get("/roles", headers=headers)
		
		self.assertEqual(response.status_code, 200)

	def test_show_roles_2(self):
		print "test_show_roles_2"
		payload = {'role_name': ''}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
		
		response = self.client.get("/roles", headers=headers)
		
		self.assertEqual(response.status_code, 200)	

	def test_show_roles_3(self):
		print "test_show_roles_3"
		
		response = self.client.get("/roles")
		
		self.assertEqual(response.status_code, 200)
#+END_SRC
** Delete User
   API for Delete User
*** API Design
  - URL :: /delete_user
  - Method :: DELETE
  - URL Params ::  
    {
       "email" : "test@gmail.com"
    }
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/delete_user?email=test@gmail.com
    #+END_EXAMPLE
*** Implementation
    Admin also has the right to delete a user. To delete a user =email= should be given as the field to delete a particular user.

#+NAME: delete_user
#+BEGIN_SRC python 
@mod_users.route('/delete_user', methods=['POST'])
@login_required
@requires_admin_auth
def delete_user():
    try:
        email = request.args['user_email']
    except KeyError as e:
        return jsonify(success=False, message="%s not sent in the request" % e.args), 400
    user_todel = User.query.filter(User.email==email).first()
    if user_todel is None:
        return jsonify(success=False, message="This email does not exists"), 400

    db.session.delete(user_todel) 
    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="could'nt delete the user"), 500
    return jsonify(success=True)

#+END_SRC
*** Test Cases
**** Test Delete user
#+NAME: test_delete_user
#+BEGIN_SRC python
class TestDeleteUser(TestCase):
    TESTING = True
    def create_app(self):
        app = Flask(__name__)
        app.register_blueprint(mod_users, url_prefix=None)
        app.config.from_object("config")
        app.config['TESTING'] = True
        login_manager = LoginManager(app)
        login_manager.login_view = "users.login"
        self.app = app.test_client()
        db.init_app(app)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_role_1(self):
		print "test_delete_role_1"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
        
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
		payload = {'name': 'Test1',
			       'email': 'test1@gmail.com',
		           'role' : 'admin'
		           }
		
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

		response = self.client.post("/delete_user?user_email=test1@gmail.com", headers=headers)
		
		self.assertEqual(response.status_code, 200)

    def test_delete_role_2(self):
		print "test_delete_role_2"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
        
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
		payload = {'name': 'Test2',
			       'email': 'test2@gmail.com',
		           'role' : 'admin'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

		response = self.client.post("/delete_user?user_email=", headers=headers)
		
		self.assertEqual(response.status_code, 400)	

    def test_delete_role_3(self):
		print "test_delete_role_3"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
		payload = {'name': 'Test3',
			       'email': 'test3@gmail.com',
		           'role' : 'admin'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)

		response = self.client.post("/delete_user?user_email=test@gmail.com", headers=headers)
		
		self.assertEqual(response.status_code, 400)	

#+END_SRC
** Delete Role
   API to Delete a Role
*** API Design
 - URL :: /delete_role
  - Method :: POST
  - URL Params ::  
    {
       "role_name" : "admin"
    }
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/delete_role?role_name=admin
    #+END_EXAMPLE
*** Implementation
    Admin has the right to delete a role. To delete a role, =role_name= 
    should be sent as an argument.
    Implementation of =delete role= is given below.
#+NAME: delete_role
#+BEGIN_SRC python

@mod_users.route('/delete_role', methods=['POST'])
@login_required	
@requires_admin_auth
def delete_role():
    try:
        role_name = request.args['role_name']
    except KeyError as e:
        return jsonify(success=False, message="%s not sent in the request" % e.args), 400

    if not role_name:
        return jsonify(success=False, message="No role provided"), 400

    role_todel = Roles.query.filter(Roles.role_name==role_name).first()
    if role_todel is None:
        return jsonify(success=False, message="This role does not exists"), 400
    db.session.delete(role_todel)
    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="could not delete"), 500
    return jsonify(success=True)

#+END_SRC

*** Test Cases
**** Test Delete role
#+NAME: test_delete_role
#+BEGIN_SRC python
class TestDeleteRole(TestCase):
    TESTING = True
    def create_app(self):
        app = Flask(__name__)
        app.register_blueprint(mod_users, url_prefix=None)
        app.config.from_object("config")
        app.config['TESTING'] = True
        login_manager = LoginManager(app)
        login_manager.login_view = "users.login"
        self.app = app.test_client()
        db.init_app(app)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_user_1(self):
        print "test_delete_role_1"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
        response = self.client.post("/delete_role?role_name=admin", headers=headers)

        self.assertEqual(response.status_code, 200)

    def test_delete_user_2(self):
		print "test_delete_role_2"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
		
		response = self.client.post("/delete_role?role_name=", headers=headers)

		self.assertEqual(response.status_code, 400)

    def test_delete_user_3(self):
        print "test_delete_role_3"
        payload = {'role_name': 'admin'}
        headers = {'Content-Type': 'application/json'}
        
        response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)
        
        response = self.client.post("/delete_role?role_name=guest", headers=headers)

        self.assertEqual(response.status_code, 400)

#+END_SRC
** Update User
   API to Update a User
*** API Design
 - URL :: /update_user
  - Method :: PUT
  - URL Params ::  
    {
       "email" : "test@gmail.com"
       "new_email" : "test1@gmail.com"
       "new_role" : "admin"
       "new_name" : "test1"
    }
  - Success Response ::
    + Code: 200
  - Example ::
    #+BEGIN_EXAMPLE
    http://localhost:5000/update_user?email=test@gmail.com&new_email=test1&gmail.com&new_name=test2&new_role=admin
    #+END_EXAMPLE
*** Implementation
    Admin has the right to edit the details of a student who is registered 
    for the Lab Data Service. He can edit any of the details =name=,=email=
    or =role=.
    The implementation is given below.
#+NAME: update_user
#+BEGIN_SRC python

@mod_users.route('/update_user', methods=['PUT'])
@login_required
@requires_admin_auth
def update_user():

    try:
        temp = json.loads(request.data)
        email = temp['email']
        new_name = temp['new_name']
        new_email = temp['new_email']
        new_role = temp['new_role']
    except:
        try:
            email = request.args.get['email']
            new_name = request.args.get['new_name']
            new_email = request.args.get['new_email']
            new_role = request.args.get['new_role']
        except KeyError as e:
            return jsonify(success=False, message="%s not sent in the request" % e.args), 400

    if not (new_name or new_role or new_email):
        return jsonify(success=False, message="Invalid arguments were provided"), 400

    user_toupdate = User.query.filter(User.email==email).first()
    if user_toupdate is None:
        return jsonify(success=False, message="This email doesn't exists"), 400

    check_role = Roles.query.filter(Roles.role_name==new_role).first()
    if check_role is None:
        return jsonify(success=False, message="Role doesn't exist"), 400
    user_toupdate.name = new_name
    user_toupdate.email = new_email
    user_toupdate.role = new_role

    try:
        db.session.commit()
    except IntegrityError as e:
        return jsonify(success=False, message="Could not update the user"), 500

    return jsonify(success=True)
#+END_SRC

								:boilerplate:

*** Test Cases
**** Test Update user
#+NAME: test_update_user
#+BEGIN_SRC python
class TestUpdateUsers(TestCase):
	TESTING = True
	def create_app(self):
		app = Flask(__name__)
		app.register_blueprint(mod_users, url_prefix=None)
		app.config.from_object("config")
		app.config['TESTING'] = True
		login_manager = LoginManager(app)
		login_manager.login_view = "users.login"
		self.app = app.test_client()
		db.init_app(app)
		return app

	def setUp(self):
		db.create_all()

	def tearDown(self):
		db.session.remove()
		db.drop_all()

	def test_update_user_1(self):
		print "test_update_user_1"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)

		payload = {'role_name': 'user'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)

		payload = {'name': 'Test1',
			       'email': 'test1@gmail.com',
		           'role' : 'admin'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)
		
		payload1 = {'new_name': 'Test_1',
			       'email': 'test1@gmail.com',
				   'new_email': 'test1@gmail.com',
		           'new_role' : 'user'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.put("/update_user", data=json.dumps(payload1), headers=headers)

		self.assertEqual(response.status_code, 200)

	def test_update_user_2(self):
		print "test_update_user_2"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)

		payload = {'role_name': 'user'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)

		payload = {'name': 'Test2',
			       'email': 'test2@gmail.com',
		           'role' : 'admin'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)
		
		payload1 = {'new_name': '',
			       'email': 'test1@gmail.com',
				   'new_email': 'test1@gmail.com',
		           'new_role' : 'user'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.put("/update_user", data=json.dumps(payload1), headers=headers)

		self.assertEqual(response.status_code, 400)

	def test_update_user_3(self):
		print "test_update_user_3"
		payload = {'role_name': 'admin'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)

		payload = {'role_name': 'user'}
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_role", data=json.dumps(payload), headers=headers)

		payload = {'name': 'Test3',
			       'email': 'test3@gmail.com',
		           'role' : 'admin'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.post("/add_user", data=json.dumps(payload), headers=headers)
		
		payload1 = {'new_name': 'Test_3',
			       'email': 'test@gmail.com',
				   'new_email': 'test1@gmail.com',
		           'new_role' : 'user'
		           }
		headers = {'Content-Type': 'application/json'}
		
		response = self.client.put("/update_user", data=json.dumps(payload1), headers=headers)

		self.assertEqual(response.status_code, 400)
#+END_SRC
* HTML
** Login
This is the HTML code for Login page
#+NAME: login_page
#+BEGIN_SRC html :tangle templates/login.html
<html>
<head>
<title> LOGIN </title>
<meta name="google-signin-client_id" content="322635468838-51ldl2n1dngsfsrtmv22lk4qi2so75e6.apps.googleusercontent.com">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script> 
</head>
<body>

<form id="form">
Enter your Email:
<input type="text" name="email" id="email"/>
<input type="button" value ="Login "class="btn btn-primary" onclick="check_user('{{auth_url}}')"/>
</form>
<br/>
<button type="button" class="btn btn-primary" onclick="location.href='{{auth_url}}';">Login</button>
</button>
</body>
</html>

#+END_SRC

** Homepage
This is the HTML code for Homepage.
#+NAME: home_page
#+BEGIN_SRC html :tangle templates/index.html
<html>
<head>
<title> WELCOME </title>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script> 
</head>
<body>
<h1> Hello </h1>
<button type="button" class="btn btn-primary" onclick="location.href='{{ url_for('users.logout') }}';">Logout</button>
</body>
</html>
#+END_SRC
* JS
** Ajax
This function checks whether the user trying to login
is there is the database or not.If the user is there
in the database, page is redirected to google,else
error is shown that user is not availed to LDS.
#+NAME: ajax
#+BEGIN_SRC javascript :tangle static/js/main.js

var check_user = function (link)
{
	var user_email = document.getElementById('form');
	console.log(user_email.elements[0].value)
	$.ajax({
url : 'https://localhost:5000/check_valid',
method: "POST",
data: {
email:user_email.elements[0].value
},
async:false,
success: function(response){
console.log(response.success)
var resp = response;
if(resp.success)
{
window.location = link;
console.log('yeayy success!');
}
else {
window.location = "https://localhost:5000/login"	
console.log('User is not availed to LDS');
}
},

});
return user_email;
}
#+END_SRC
* Infra                                                         :boilerplate:


** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from flask import Blueprint, Flask, url_for, redirect, \
    render_template, session, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, login_required, login_user, \
    logout_user, current_user, UserMixin
from requests_oauthlib import OAuth2Session
from requests.exceptions import HTTPError
from app import app, db, login_manager
from app.users.models import User, Roles
import os
import json
import re
import time
from sqlalchemy.exc import IntegrityError

api = Blueprint('users', __name__)

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
import os
import sys
from flask import Flask, Blueprint, json    
from flask_testing import TestCase
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import IntegrityError
from app.users.controllers import mod_users
import datetime
from flask_login import LoginManager
from app.users.models import User, Roles
from config import basedir
from app import app, db
import client

config = {
        'SQLALCHEMY_DATABASE_URI': 'sqlite:///' + os.path.join(basedir, "app.db"),
        'DATABASE_CONNECT_OPTIONS': {},
        'SQLALCHEMY_TRACK_MODIFICATIONS': False,         
    }
#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes

<<imports_for_sources>>
<<serve_index_html>>
<<oauth_session_creation>>
<<check_email>>
<<callback_google_api>>
<<google_oauth_configuration>>
<<logout_route>>
<<add_user>>
<<add_role>>
<<show_users>>
<<show_roles>>
<<delete_user>>
<<delete_role>>
<<update_user>>
#+END_SRC
   

** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_add_user>>
<<test_add_role>>
<<test_show_users>>
<<test_show_roles>>
<<test_delete_user>>
<<test_delete_role>>
<<test_update_user>>
<<run_test_cases>>
#+end_src
